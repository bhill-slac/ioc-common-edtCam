# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "$(P)CAM$(CAM):PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control basic information                        #
#  about the detector                                             # 
###################################################################

record(stringin, "$(P)CAM$(CAM):Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "$(P)CAM$(CAM):Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "$(P)CAM$(CAM):DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
}

record(mbbi, "$(P)CAM$(CAM):DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "$(P)CAM$(CAM):ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
}

record(mbbi, "$(P)CAM$(CAM):ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "$(P)CAM$(CAM):BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))BIN_X")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))BIN_Y")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MIN_X")
   field(VAL,  "0")
}

record(longin, "$(P)CAM$(CAM):MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MIN_Y")
   field(VAL,  "0")
}

record(longin, "$(P)CAM$(CAM):MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SIZE_X")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SIZE_Y")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

record(bi, "$(P)CAM$(CAM):ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

record(bi, "$(P)CAM$(CAM):ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "$(P)CAM$(CAM):AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
}

record(ai, "$(P)CAM$(CAM):AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)CAM$(CAM):AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
}

record(ai, "$(P)CAM$(CAM):AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "$(P)CAM$(CAM):TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "$(P)CAM$(CAM):Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
}

record(ai, "$(P)CAM$(CAM):Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "$(P)CAM$(CAM):FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "2")
   field(VAL,  "0")
}

record(mbbi, "$(P)CAM$(CAM):FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "$(P)CAM$(CAM):ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
}

record(mbbi, "$(P)CAM$(CAM):ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "$(P)CAM$(CAM):TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
}

record(mbbi, "$(P)CAM$(CAM):TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "$(P)CAM$(CAM):NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NEXPOSURES")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "$(P)CAM$(CAM):NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NIMAGES")
   field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control  acquisition start and                   # 
#  and stop                                                       #
###################################################################

record(busy, "$(P)CAM$(CAM):Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
}

record(bi, "$(P)CAM$(CAM):Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(P)CAM$(CAM):ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_COUNTER")
}

record(longin, "$(P)CAM$(CAM):ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because .B should reflect the time since last processed
record(calc, "$(P)CAM$(CAM):ArrayRate_RBV")
{
    field(INPA, "$(P)CAM$(CAM):ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(P)CAM$(CAM):ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "$(P)CAM$(CAM):DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "MINOR")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "MINOR")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "MINOR")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "MINOR")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "MINOR")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "$(P)CAM$(CAM):ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(bi, "$(P)CAM$(CAM):ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(P)CAM$(CAM):NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))ND_ATTRIBUTES_FILE")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "$(P)CAM$(CAM):StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))STATUS_MESSAGE")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)CAM$(CAM):StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))STRING_TO_SERVER")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)CAM$(CAM):StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))STRING_FROM_SERVER")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"$(P)CAM$(CAM):ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "$(P)CAM$(CAM):ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
}

record(mbbi, "$(P)CAM$(CAM):ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "$(P)CAM$(CAM):ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)CAM$(CAM):ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)CAM$(CAM):ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
}

record(ai, "$(P)CAM$(CAM):ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)CAM$(CAM):ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
}

record(ai, "$(P)CAM$(CAM):ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "$(P)CAM$(CAM):ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)CAM$(CAM):ShutterFanout.PROC")
}

record(fanout, "$(P)CAM$(CAM):ShutterFanout")
{
    field(LNK1, "$(P)CAM$(CAM):ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "$(P)CAM$(CAM):ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "$(P)CAM$(CAM):ShutterOpenEPICS")
{
    field(INPA, "$(P)CAM$(CAM):ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
}

record(calcout, "$(P)CAM$(CAM):ShutterCloseEPICS")
{
    field(INPA, "$(P)CAM$(CAM):ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
}

record(mbbi, "$(P)CAM$(CAM):ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "$(P)CAM$(CAM):Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))TEMPERATURE")
   field(PREC, "3")
   field(VAL,  "25.0")
}

record(ai, "$(P)CAM$(CAM):Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))TEMPERATURE")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(P)CAM$(CAM):AsynIO")
{
    field(PORT, "CAM$(CAM)")
    field(TIB2,"1")
    info("ADType", "ADDriver")
}

# Database for NDFile driver, which saves files for NDArray data.
# Mark Rivers
# April 7, 2008

###################################################################
#  These records control file I/O                                 # 
###################################################################

# File path.
record(waveform, "$(P)CAM$(CAM):FilePath")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_PATH")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

record(waveform, "$(P)CAM$(CAM):FilePath_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_PATH")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)CAM$(CAM):FilePathExists_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_PATH_EXISTS")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

# Filename
record(waveform, "$(P)CAM$(CAM):FileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_NAME")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

record(waveform, "$(P)CAM$(CAM):FileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_NAME")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):FileNumber")
{
    field(PINI, "YES")
    field(OUT, "$(P)CAM$(CAM):FileNumber_write PP")
    field(VAL, "1")
}

record(longout, "$(P)CAM$(CAM):FileNumber_write")
{
    field(SDIS, "$(P)CAM$(CAM):FileNumber_Sync.PACT")
    field(DISV, "1")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_NUMBER")
}

record(longin, "$(P)CAM$(CAM):FileNumber_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_NUMBER")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(P)CAM$(CAM):FileNumber_Sync")
}

record(longout, "$(P)CAM$(CAM):FileNumber_Sync")
{
    field(DOL,  "$(P)CAM$(CAM):FileNumber_RBV NPP")
    field(OMSL, "closed_loop")
    field(OUT,  "$(P)CAM$(CAM):FileNumber PP")
}

# Autoincrement flag
record(bo, "$(P)CAM$(CAM):AutoIncrement")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))AUTO_INCREMENT")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(P)CAM$(CAM):AutoIncrement_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))AUTO_INCREMENT")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File template
record(waveform, "$(P)CAM$(CAM):FileTemplate")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_TEMPLATE")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

record(waveform, "$(P)CAM$(CAM):FileTemplate_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_TEMPLATE")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Full filename, including path
record(waveform, "$(P)CAM$(CAM):FullFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FULL_FILE_NAME")
    field(FTVL, "UCHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Autosave flag
record(bo, "$(P)CAM$(CAM):AutoSave")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))AUTO_SAVE")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bi, "$(P)CAM$(CAM):AutoSave_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Write file
record(busy, "$(P)CAM$(CAM):WriteFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))WRITE_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Write")
}

record(bi, "$(P)CAM$(CAM):WriteFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))WRITE_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Writing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}


# Read file
record(busy, "$(P)CAM$(CAM):ReadFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))READ_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Read")
}

record(bi, "$(P)CAM$(CAM):ReadFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))READ_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Reading")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

# File data format 
record(mbbo, "$(P)CAM$(CAM):FileFormat")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_FORMAT")
    field(VAL,  "0")
    field(ZRST, "Undefined")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(P)CAM$(CAM):FileFormat_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))FILE_FORMAT")
    field(ZRST, "netCDF")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# File save mode 
record(mbbo, "$(P)CAM$(CAM):FileWriteMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))WRITE_MODE")
    field(VAL,  "0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
}

record(mbbi, "$(P)CAM$(CAM):FileWriteMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))WRITE_MODE")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

# Capture data
record(busy, "$(P)CAM$(CAM):Capture")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))CAPTURE")
    field(ZNAM, "Done")
    field(ONAM, "Capture")
}

record(bi, "$(P)CAM$(CAM):Capture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))CAPTURE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Capturing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)CAM$(CAM):NumCapture")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NUM_CAPTURE")
    field(VAL,  "1")
}

record(longin, "$(P)CAM$(CAM):NumCapture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NUM_CAPTURE")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):NumCaptured_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))NUM_CAPTURED")
    field(SCAN, "I/O Intr")
}


# Database for the records specific to the Prosilica cameras
# Mark Rivers
# March 27, 2008

###############################################################################
#  Note: The following are records defined in ADBase.template.                #
#        We are changing some of the fields here to reflect valid values for  #
#        Prosilica                                                            #
###############################################################################

###############################################################################
#  These records control the trigger mode.                                    # 
###############################################################################
record(mbbo, "$(P)CAM$(CAM):TriggerMode")
{
   field(ZRST, "Free Run")
   field(ZRVL, "0")
   field(ONST, "Sync In 1")
   field(ONVL, "1")
   field(TWST, "Sync In 2")
   field(TWVL, "2")
   field(THST, "Sync In 3")
   field(THVL, "3")
   field(FRST, "Sync In 4")
   field(FRVL, "4")
   field(FVST, "Fixed Rate")
   field(FVVL, "5")
   field(SXST, "Software")
   field(SXVL, "6")
 }

record(mbbi, "$(P)CAM$(CAM):TriggerMode_RBV")
{
   field(ZRST, "Free Run")
   field(ZRVL, "0")
   field(ONST, "Sync In 1")
   field(ONVL, "1")
   field(TWST, "Sync In 2")
   field(TWVL, "2")
   field(THST, "Sync In 3")
   field(THVL, "3")
   field(FRST, "Sync In 4")
   field(FRVL, "4")
   field(FVST, "Fixed Rate")
   field(FVVL, "5")
   field(SXST, "Software")
   field(SXVL, "6")
   field(SCAN, "I/O Intr")
}

###############################################################################
#  These records control the file format.                                     # 
###############################################################################
record(mbbo, "$(P)CAM$(CAM):FileFormat")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "$(P)CAM$(CAM):FileFormat_RBV")
{
    field(ZRST, "TIFF")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

# Only 2 data types are supported, unsigned 8 and 16 bit integers
record(mbbo, "$(P)CAM$(CAM):DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)CAM$(CAM):DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Only Mono, Bayer and RGB1 color modes are supported at this time
record(mbbo, "$(P)CAM$(CAM):ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)CAM$(CAM):ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# The following records are specific to the Prosilica

###############################################################################
#  These records are for network and frame statistics                         #
###############################################################################
record(longout, "$(P)CAM$(CAM):PSReadStatistics")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_READ_STATISTICS")
   field(SCAN, "5 second")
}

record(stringin, "$(P)CAM$(CAM):PSDriverType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_DRIVER_TYPE")
   field(SCAN, "I/O Intr")
}

record(stringin, "$(P)CAM$(CAM):PSFilterVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_FILTER_VERSION")
   field(SCAN, "I/O Intr")
}

record(ai, "$(P)CAM$(CAM):PSFrameRate_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_FRAME_RATE")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSFramesCompleted_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_FRAMES_COMPLETED")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSFramesDropped_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_FRAMES_DROPPED")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSPacketsErroneous_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_PACKETS_ERRONEOUS")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSPacketsMissed_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_PACKETS_MISSED")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSPacketsReceived_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_PACKETS_RECEIVED")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSPacketsRequested_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_PACKETS_REQUESTED")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSPacketsResent_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_PACKETS_RESENT")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)CAM$(CAM):PSBadFrameCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_BAD_FRAME_COUNTER")
   field(SCAN, "I/O Intr")
}

###############################################################################
#  These records are for hardware synchronization and digital I/O             #
###############################################################################

record(bi, "$(P)CAM$(CAM):SyncIn1Level_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_IN_1_LEVEL")
   field(ZNAM, "Low")
   field(ONAM, "High")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)CAM$(CAM):SyncIn2Level_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_IN_2_LEVEL")
   field(ZNAM, "Low")
   field(ONAM, "High")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)CAM$(CAM):SyncOut1Mode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
}

record(mbbi, "$(P)CAM$(CAM):SyncOut1Mode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut1Level")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
}

record(bi, "$(P)CAM$(CAM):SyncOut1Level_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut1Invert")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)CAM$(CAM):SyncOut1Invert_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_1_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)CAM$(CAM):SyncOut2Mode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
}

record(mbbi, "$(P)CAM$(CAM):SyncOut2Mode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut2Level")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
}

record(bi, "$(P)CAM$(CAM):SyncOut2Level_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut2Invert")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)CAM$(CAM):SyncOut2Invert_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_2_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)CAM$(CAM):SyncOut3Mode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
}

record(mbbi, "$(P)CAM$(CAM):SyncOut3Mode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_MODE")
   field(ZRST, "GPO")
   field(ZRVL, "0")
   field(ONST, "AcqTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigReady")
   field(TWVL, "2")
   field(THST, "FrameTrigger")
   field(THVL, "3")
   field(FRST, "Exposing")
   field(FRVL, "4")
   field(FVST, "FrameReadout")
   field(FVVL, "5")
   field(SXST, "Imaging")
   field(SXVL, "6")
   field(SVST, "Acquiring")
   field(SVVL, "7")
   field(EIST, "SyncIn1")
   field(EIVL, "8")
   field(NIST, "SyncIn2")
   field(NIVL, "9")
   field(TEST, "SyncIn3")
   field(TEVL, "10")
   field(ELST, "SyncIn4")
   field(ELVL, "11")
   field(TVST, "Strobe1")
   field(TVVL, "12")
   field(TTST, "Strobe2")
   field(TTVL, "13")
   field(FTST, "Strobe3")
   field(FTVL, "14")
   field(FFST, "Strobe4")
   field(FFVL, "15")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut3Level")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
}

record(bi, "$(P)CAM$(CAM):SyncOut3Level_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_LEVEL")
   field(ZNAM, "False")
   field(ONAM, "True")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):SyncOut3Invert")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)CAM$(CAM):SyncOut3Invert_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_SYNC_OUT_3_INVERT")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)CAM$(CAM):Strobe1Mode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_MODE")
   field(ZRST, "AcqTrigReady")
   field(ZRVL, "0")
   field(ONST, "FrameTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigger")
   field(TWVL, "2")
   field(THST, "Exposing")
   field(THVL, "3")
   field(FRST, "FrameReadout")
   field(FRVL, "4")
   field(FVST, "Acquiring")
   field(FVVL, "5")
   field(SXST, "SyncIn1")
   field(SXVL, "6")
   field(SVST, "SyncIn2")
   field(SVVL, "7")
   field(EIST, "SyncIn3")
   field(EIVL, "8")
   field(NIST, "SyncIn4")
   field(NIVL, "9")
}

record(mbbi, "$(P)CAM$(CAM):Strobe1Mode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_MODE")
   field(ZRST, "AcqTrigReady")
   field(ZRVL, "0")
   field(ONST, "FrameTrigReady")
   field(ONVL, "1")
   field(TWST, "FrameTrigger")
   field(TWVL, "2")
   field(THST, "Exposing")
   field(THVL, "3")
   field(FRST, "FrameReadout")
   field(FRVL, "4")
   field(FVST, "Acquiring")
   field(FVVL, "5")
   field(SXST, "SyncIn1")
   field(SXVL, "6")
   field(SVST, "SyncIn2")
   field(SVVL, "7")
   field(EIST, "SyncIn3")
   field(EIVL, "8")
   field(NIST, "SyncIn4")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)CAM$(CAM):Strobe1CtlDuration")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_CTL_DURATION")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(bi, "$(P)CAM$(CAM):Strobe1CtlDuration_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_CTL_DURATION")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)CAM$(CAM):Strobe1Delay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_DELAY")
   field(PREC, "6")
}

record(ai, "$(P)CAM$(CAM):Strobe1Delay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_DELAY")
   field(PREC, "6")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)CAM$(CAM):Strobe1Duration")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_DURATION")
   field(PREC, "6")
}

record(ai, "$(P)CAM$(CAM):Strobe1Duration_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(CAM$(CAM),$(ADDR),$(TIMEOUT))PS_STROBE_1_DURATION")
   field(PREC, "6")
   field(SCAN, "I/O Intr")
}


record(longout, "$(P)CAM$(CAM):Cross1X")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross1X_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross1X_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross1X_RBV")
{
   field(DTYP, "Soft Channel")
}

record(longout, "$(P)CAM$(CAM):Cross1Y")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross1Y_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross1Y_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross1Y_RBV")
{
   field(DTYP, "Soft Channel")
}

record(longout, "$(P)CAM$(CAM):Cross1Color")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross1Color_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross1Color_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross1Color_RBV")
{
   field(DTYP, "Soft Channel")
}

record(longout, "$(P)CAM$(CAM):Cross2X")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross2X_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross2X_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross2X_RBV")
{
   field(DTYP, "Soft Channel")
}

record(longout, "$(P)CAM$(CAM):Cross2Y")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross2Y_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross2Y_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross2Y_RBV")
{
   field(DTYP, "Soft Channel")
}

record(longout, "$(P)CAM$(CAM):Cross2Color")
{
   field(DTYP, "Soft Channel")
   field(FLNK, "$(P)CAM$(CAM):Cross2Color_RBV")
   field(OUT, "$(P)CAM$(CAM):Cross2Color_RBV")
}

record(longin, "$(P)CAM$(CAM):Cross2Color_RBV")
{
   field(DTYP, "Soft Channel")
}

# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

###################################################################
#  This record contains the asyn port name of this plugin         #
###################################################################

record(stringin, "$(P)IMAGE$(CAM):PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "$(P)IMAGE$(CAM):PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "$(P)IMAGE$(CAM):NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))NDARRAY_PORT")
    field(VAL,  "CAM$(CAM)")
}

record(stringin, "$(P)IMAGE$(CAM):NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)IMAGE$(CAM):NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))NDARRAY_ADDR")
    field(VAL,  "$(NDARRAY_ADDR)")
}

record(longin, "$(P)IMAGE$(CAM):NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "$(P)IMAGE$(CAM):EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "0")
}

record(bi, "$(P)IMAGE$(CAM):EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "$(P)IMAGE$(CAM):MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
}

record(ai, "$(P)IMAGE$(CAM):MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "$(P)IMAGE$(CAM):BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
}

record(bi, "$(P)IMAGE$(CAM):BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "$(P)IMAGE$(CAM):ArrayCounter")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ARRAY_COUNTER")
    field(VAL,  "0")
}

record(longin, "$(P)IMAGE$(CAM):ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# This record needs work, because B should reflect the time since last processed
record(calc, "$(P)IMAGE$(CAM):ArrayRate_RBV")
{
    field(INPA, "$(P)IMAGE$(CAM):ArrayRate_RBV.B NPP NMS")  # Previous counter value
    field(INPB, "$(P)IMAGE$(CAM):ArrayCounter_RBV NPP NMS") # Current counter value
    field(INPC, "1.0")                              # Delta time, needs work
    field(CALC, "(B-A)/C")
    field(PREC, "1")
    field(SCAN, "1 second")
}

record(longout, "$(P)IMAGE$(CAM):DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "$(P)IMAGE$(CAM):DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longin, "$(P)IMAGE$(CAM):NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform record
record(waveform, "$(P)IMAGE$(CAM):Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "$(P)IMAGE$(CAM):Dim0SA")
    field(SCAN, "I/O Intr")
}

# Note, we only extract the first 2 dimensions here, but this
# can easily be extended up to the maximum of 10 dimensions
record(subArray, "$(P)IMAGE$(CAM):Dim0SA")
{
    field(INP,  "$(P)IMAGE$(CAM):Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "$(P)IMAGE$(CAM):ArraySize0_RBV")
}

record(longin, "$(P)IMAGE$(CAM):ArraySize0_RBV")
{
    field(INP,  "$(P)IMAGE$(CAM):Dim0SA")
    field(FLNK, "$(P)IMAGE$(CAM):Dim1SA")
}

record(subArray, "$(P)IMAGE$(CAM):Dim1SA")
{
    field(INP,  "$(P)IMAGE$(CAM):Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "$(P)IMAGE$(CAM):ArraySize1_RBV")
}

record(longin, "$(P)IMAGE$(CAM):ArraySize1_RBV")
{
    field(INP,  "$(P)IMAGE$(CAM):Dim1SA")
    field(FLNK, "$(P)IMAGE$(CAM):Dim2SA")
}

record(subArray, "$(P)IMAGE$(CAM):Dim2SA")
{
    field(INP,  "$(P)IMAGE$(CAM):Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "$(P)IMAGE$(CAM):ArraySize2_RBV")
}

record(longin, "$(P)IMAGE$(CAM):ArraySize2_RBV")
{
    field(INP,  "$(P)IMAGE$(CAM):Dim2SA")
#    field(FLNK, "$(P)IMAGE$(CAM):Dim3SA")
}

record(mbbi, "$(P)IMAGE$(CAM):DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Float32")
   field(SXVL, "6")
   field(SVST, "Float64")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)IMAGE$(CAM):ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)IMAGE$(CAM):BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamp of the array     #
###################################################################
record(longin, "$(P)IMAGE$(CAM):UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)IMAGE$(CAM):TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the name of a file defining attributes        # 
###################################################################

record(waveform, "$(P)IMAGE$(CAM):NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))ND_ATTRIBUTES_FILE")
    field(FTVL, "UCHAR")
    field(NELM, "256")
}

###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"$(P)IMAGE$(CAM):AsynIO")
{
    field(PORT, "IMAGE$(CAM)")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}

# Database for NDStdArrays asyn driver and standard asyn device support
# Mark Rivers
# April 14, 2008

###################################################################
#  This record is the array waveform data                         #
###################################################################
record(waveform, "$(P)IMAGE$(CAM):ArrayData")
{
    field(DTYP, "asyn$(TYPE)ArrayIn")
    field(INP,  "@asyn(IMAGE$(CAM),$(ADDR),$(TIMEOUT))STD_ARRAY_DATA")
    field(FTVL, "$(FTVL)")
    field(NELM, "$(NELEMENTS)")
    field(SCAN, "I/O Intr")
}
