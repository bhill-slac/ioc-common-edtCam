#
# TPR Timestamp and EventCode support
#
# Contains record to add camera trigger delay to camera
# image acquisition time from trigger till when the timestamp is updated.
#
# Db records to compute timestamp delays and to propagate beam
# event code to timeStampSource PV.
#
# Required macros:
#	CAM				- Prefix for camera
#	TSS				- Prefix for timeStampFifo PVs
#	TPR_PV			- TPR PV prefix
#	TPE_PV			- TPR Events PV prefix
#	TPR_CH			- TPR channel number
#	TPR_TR			- TPR trigger number
#	TPR_SE			- TPR soft event number
#
# TODO: Do I need any of these for TPR?
# Optional macros:
#	CAM_DLY			- PV to write camera trigger delay to,  typically $CAM_TRIG:TDES
#	CAM_DLY_EGU		- EGU for camera delay, defaults to ns
#	CAM_DLY_SCALE	- Scale factor for coverting camera delay to sec, defaults to 1e9
#	TSDLY_PV		- PV to write timestamp delay to, default to $(TSS):ExpectedDelay
#

#record( ao, "$(CAM):CamTrigDelay" )
#{
##field( TPRO, "$(TPRO=2)" )
#	field( PREC, "4" )
#	field( EGU,  "sec" )
#	field( FLNK, "$(CAM):CamTrigDelayCalc" )
#	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC HOPR LOPR PREC VAL" )
#	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR PREC VAL" )
#}
#
## This record calculates the TPR trigger delay and writes it to the
## appropriate TPR record via macro CAM_DLY
#record( calcout, "$(CAM):CamTrigDelayCalc" )
#{
#	field( INPA, "$(CAM):CamTrigDelay NPP MS" )
#	field( INPB, "$(CAM):CamDelayScale NPP MS" )
#	field( CALC, "FLOOR(A*B)" )
#	field( OOPT, "On Change" )
#	field( OUT,  "$(CAM_DLY=) PP MS" )
#	field( EGU,  "$(CAM_DLY_EGU=ns)" )
#	field( PREC, "4" )
#	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC PREC" )
#	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
#}

record( longout, "$(CAM):CamDelayScale" )
{
	field( DOL,  "$(CAM_DLY_SCALE=1000000000)" )
	field( EGU,  "$(CAM_DLY_EGU=ns)" )
	field( PINI, "YES" )
#	field( FLNK, "$(CAM):CamTrigDelayCalc" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
}

record( calcout, "$(CAM):CamTrigDelay_RBV" )
{
#field( TPRO, "$(TPRO=2)" )
	field( INPA, "$(TPR_PV):MODE CP MS" )
	field( INPB, "$(CAM):CamDelayScale CP MS" )
	field( INPC, "$(TPR_PV):TRG$(TPR_TR)_SYS0_TDES CP MS" )
	field( INPD, "$(TPR_PV):TRG$(TPR_TR)_SYS2_TDES CP MS" )
	field( CALC, "A==0?(C/B):(D/B)" )
	field( EGU,  "sec" )
	field( PREC, "4" )
#	field( OOPT, "On Change" )
#	field( IVOA, "Don't drive outputs" )
#	field( OUT,  "$(CAM):CamTrigDelay PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV     DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

#
# ExpectedDelay_Calc:
#   Calculates expected delay from trigger to timeStamp update 
# Inputs: All units in seconds
#	A	- Camera trigger delay
#	B	- Camera trigger to timestamp delay
record( calcout, "$(CAM):ExpectedDelay_Calc" )
{
    field( INPA, "$(CAM):CamTrigDelay_RBV CP MS" )
    field( INPB, "$(CAM):TrigToTS_Calc CP MS" )
    field( CALC, "A+B" )
    field( EGU,  "sec" )
    field( PREC, "5" )
    field( OUT,  "$(TSDLY_PV=$(TSS):ExpectedDelay) PP MS" )
}

#record( longout, "$(CAM):CamEventCode" )
#{
##field( TPRO, "$(TPRO=2)" )
##	field( VAL,  "-1" )
## Dropping PINI and autosave of VAL field as it's already autosaved via the TPR trigger event code
#	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR" )
#	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC HOPR LOPR VAL" )
#}

# Use CA to monitor LCLS1 vs LCLS2 and compute the current TPR event code
record( calcout, "$(CAM):CamEventCode_RBV" )
{
#	field( INPA, "$(TPR_PV):MODE CP MS" )
#	field( INPB, "$(TPR_PV):CH$(TPR_CH)_EVCODE CP MS" )
#	field( CALC, "A==2?B:(1000+$(TPR_CH))" )
	field( CALC, "(1000+$(TPR_CH))" )
	field( PINI, "YES" )
#	field( OOPT, "On Change" )
#	field( IVOA, "Don't drive outputs" )
#	field( OUT,  "$(TPE_PV):EVSOFT$(TPR_SE) PP MS" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC VAL" )
}

record( ai, "$(CAM):CamRepRate_RBV" )
{
	field( INP, "$(TPR_PV):CH$(TPR_CH)_RATE CP MS" )
	field( EGU,  "Hz" )
	field( PREC, "1" )
	field( FLNK, "$(CAM):CamRepDur" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}

record( calc, "$(CAM):CamRepDur" )
{
	field( INPA, "$(CAM,undefined):CamRepRate_RBV CPP MS" )
	field( CALC, "A==0?10:(1/A)" )
	field( EGU,  "sec" )
	field( PREC, "3" )
	info( autosaveFields, "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC" )
	info( archiveFields,  "HHSV HIGH HIHI HSV LLSV LOLO LOW LSV EGU DESC PREC VAL" )
}


# This record monitors the trigger mode and puts the timestamp source
# into freeRun mode while the camera is in freeRun.
# $(CAM):TriggerMode_RBV is assumed to keep ADCore's 0==Internal
record( calcout, "$(CAM):TsFreeRunCalc" )
{
    field( DESC, "Update TS FreeRun mode" )
	field( INPA, "$(CAM):TriggerMode_RBV CPP NMS" )
    field( CALC, "A==0?1:0" )
	field( OUT,  "$(TSS):TsFreeRun PP NMS" )
	info( autosaveFields, "DESC" )
}

record( bo, "$(TSS):TsFreeRun" )
{
  field( ZNAM, "Triggered" )
  field( ONAM, "FreeRun" )
}
record( ao, "$(TSS):ExpectedDelay" ) { }
